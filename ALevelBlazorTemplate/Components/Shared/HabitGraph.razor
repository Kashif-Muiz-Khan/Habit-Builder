@using ALevelBlazorTemplate.Context
@using ALevelBlazorTemplate.Model
@using ApexCharts
@using System.ComponentModel.DataAnnotations
@inject DatabaseContext DatabaseContext
@inject OrderProvider OrderProvider



<h3>HabitGraph</h3>

<div class="d-flex" style="width: 25rem; height: auto;">
    <ApexChart TItem="Order" Title="Habit Tracker">
        <ApexPointSeries TItem="Order"
                         Items="orderProvider.Orders"
                         Name="Points"
                         SeriesType="SeriesType.Area"
                         XValue="e => e.Day"
                         YValue="e => e.TotalPoints" />
    </ApexChart>
</div>

<br />
<br />

<EditForm Model="@habitModel" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />

    <div class="col-12 col-xl-4 mb-3">
        <div class="card h-100">
            <div class="card-body bg-light d-flex flex-column">
                <h4 class="card-title">Habit Tracker</h4>

                <div class="form-group mb-2">
                    <label for="day">Day</label>
                    <InputText id="day" class="form-control" @bind-Value="@habitModel.Day" placeholder="Day" />
                    <div class="small">
                        <ValidationMessage For="@(() => habitModel.Day)" />
                    </div>
                </div>
                <div class="form-group mb-2">
                    <label for="point">Point</label>
                    <div class="input-group">
                        <InputNumber id="point" class="form-control" @bind-Value="@habitModel.Point" placeholder="1" min="1" max="10000" step="1" />
                        <div class="small">
                            <ValidationMessage For="@(() => habitModel.Point)" />
                        </div>
                    </div>
                </div>
                <div class="mt-auto">
                    <button type="submit" class="btn btn-outline-primary w-100">Submit</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private Habit habitModel = new Habit();
    private OrderProvider orderProvider;

    protected override void OnInitialized()
    {
        orderProvider = new OrderProvider(DatabaseContext); // Instantiate OrderProvider
        LoadOrders();
    }

    private async Task LoadOrders()
    {
        var orders = await orderProvider.GetAllOrdersAsync();
        // Assign the orders to the orderProvider
        orderProvider.Orders = orders;
    }

    private async Task HandleSubmit()
    {
        await orderProvider.CreateOrder(new User(), new List<OrderItem>
        {
            new OrderItem { Habit = habitModel.Name } // Assuming habitModel.Day is the habit name
        });
        await LoadOrders(); // Reload orders after submission
        habitModel = new Habit(); // Reset the model after submission
    }
}
}
