@using System.ComponentModel.DataAnnotations
@using ALevelBlazorTemplate.Context
@using ALevelBlazorTemplate.Model
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@inject UserProvider UserProvider
@inject OrderProvider OrderProvider
@inject HabitProvider HabitProvider
@inject DatabaseContext DatabaseContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore















    <div class="col-md-9">
        <div class="card" style ="height : 10rem;">
            <div class="card-body cardss">
                <h4 class="card-title" style="text-align:center; color: white;">Habit Order</h4>
                <EditForm OnValidSubmit="MakePayment" Model="paymentDetails" FormName="paymentdetails">
                    <div class="row g-3">
                        <div class="col-md-12">
                            <label for="name" class="form-label" style="color: white;">Name On Card</label>
                            <InputText class="form-control" placeholder="Name On Card" @bind-Value="paymentDetails.NameOnCard" />
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

<div class="card">
    @foreach (Habit habit in Habits)
    {
        <div class="form-check">
            <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
            <label class="form-check-label" for="flexCheckDefault">
                @habit.Name
            </label>
        </div>
    }
</div>







@code {
    private IQueryable<Habit>? Habits { get; set; }
    private decimal total;
    private User user;
    private PaymentDetails paymentDetails;
    private EditContext editContext;
    private bool isPaying;

    protected override async Task OnInitializedAsync()
    {
        paymentDetails = new PaymentDetails();
        editContext = new EditContext(paymentDetails);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        user = UserProvider.GetUserByUsername(username)!;
        Habits = (await HabitProvider.GetAllHabitsAsync()).AsQueryable();
    }

    private async Task MakePayment()
    {
        await SimulatePayment();

        // await OrderProvider.CreateOrder(user, ShoppingCart.GetItems());
        // ShoppingCart.Clear();
        NavigationManager.NavigateTo("/thank-you");
    }

    private async Task SimulatePayment()
    {
        isPaying = true;
        StateHasChanged();

        await Task.Delay(500);

        isPaying = false;
        StateHasChanged();
    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }

    
    private sealed class PaymentDetails
    {
        [Required(ErrorMessage = "Please provide the name on the card.")]
        public string NameOnCard { get; set; }

        [Required(ErrorMessage = "Please provide the card number.")]
        [CreditCard(ErrorMessage = "Invalid card number.")]
        public string CardNumber { get; set; }

        [Required(ErrorMessage = "Please provide the expiry date.")]
        [RegularExpression(@"^(0[1-9]|1[0-2])\/\d{2}$", ErrorMessage = "Invalid expiry date. Use MM/YY format.")]
        public string ExpiryDate { get; set; }

        [Required(ErrorMessage = "Please provide the security code.")]
        [RegularExpression(@"^\d{3,4}$", ErrorMessage = "Invalid security code.")]
        public string SecurityCode { get; set; }
    }




    public string GetStrengthBadgeColor(string strength)
    {
        switch (strength.ToLower())
        {
            case "medium":
                return "badge bg-warning text-dark";
            case "mild":
                return "badge bg-success";
            case "strong":
                return "badge bg-danger";
            default:
                return "badge bg-primary";
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        StateHasChanged();
    }



}